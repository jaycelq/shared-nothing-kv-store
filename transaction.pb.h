// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

#ifndef PROTOBUF_transaction_2eproto__INCLUDED
#define PROTOBUF_transaction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace InMemDB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_transaction_2eproto();
void protobuf_AssignDesc_transaction_2eproto();
void protobuf_ShutdownFile_transaction_2eproto();

class TransReq;
class TransReq_Op;
class TransRsp;
class TransRsp_Rsp;

enum TransReq_Op_OpCode {
  TransReq_Op_OpCode_GET = 1,
  TransReq_Op_OpCode_PUT = 2,
  TransReq_Op_OpCode_GETRANGE = 3
};
bool TransReq_Op_OpCode_IsValid(int value);
const TransReq_Op_OpCode TransReq_Op_OpCode_OpCode_MIN = TransReq_Op_OpCode_GET;
const TransReq_Op_OpCode TransReq_Op_OpCode_OpCode_MAX = TransReq_Op_OpCode_GETRANGE;
const int TransReq_Op_OpCode_OpCode_ARRAYSIZE = TransReq_Op_OpCode_OpCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransReq_Op_OpCode_descriptor();
inline const ::std::string& TransReq_Op_OpCode_Name(TransReq_Op_OpCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransReq_Op_OpCode_descriptor(), value);
}
inline bool TransReq_Op_OpCode_Parse(
    const ::std::string& name, TransReq_Op_OpCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransReq_Op_OpCode>(
    TransReq_Op_OpCode_descriptor(), name, value);
}
// ===================================================================

class TransReq_Op : public ::google::protobuf::Message {
 public:
  TransReq_Op();
  virtual ~TransReq_Op();
  
  TransReq_Op(const TransReq_Op& from);
  
  inline TransReq_Op& operator=(const TransReq_Op& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransReq_Op& default_instance();
  
  void Swap(TransReq_Op* other);
  
  // implements Message ----------------------------------------------
  
  TransReq_Op* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransReq_Op& from);
  void MergeFrom(const TransReq_Op& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TransReq_Op_OpCode OpCode;
  static const OpCode GET = TransReq_Op_OpCode_GET;
  static const OpCode PUT = TransReq_Op_OpCode_PUT;
  static const OpCode GETRANGE = TransReq_Op_OpCode_GETRANGE;
  static inline bool OpCode_IsValid(int value) {
    return TransReq_Op_OpCode_IsValid(value);
  }
  static const OpCode OpCode_MIN =
    TransReq_Op_OpCode_OpCode_MIN;
  static const OpCode OpCode_MAX =
    TransReq_Op_OpCode_OpCode_MAX;
  static const int OpCode_ARRAYSIZE =
    TransReq_Op_OpCode_OpCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OpCode_descriptor() {
    return TransReq_Op_OpCode_descriptor();
  }
  static inline const ::std::string& OpCode_Name(OpCode value) {
    return TransReq_Op_OpCode_Name(value);
  }
  static inline bool OpCode_Parse(const ::std::string& name,
      OpCode* value) {
    return TransReq_Op_OpCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .InMemDB.TransReq.Op.OpCode code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::InMemDB::TransReq_Op_OpCode code() const;
  inline void set_code(::InMemDB::TransReq_Op_OpCode value);
  
  // required int32 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // optional int32 key2 = 3 [default = 0];
  inline bool has_key2() const;
  inline void clear_key2();
  static const int kKey2FieldNumber = 3;
  inline ::google::protobuf::int32 key2() const;
  inline void set_key2(::google::protobuf::int32 value);
  
  // optional string value = 4 [default = ""];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:InMemDB.TransReq.Op)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_key2();
  inline void clear_has_key2();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int code_;
  ::google::protobuf::int32 key_;
  ::std::string* value_;
  ::google::protobuf::int32 key2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_transaction_2eproto();
  friend void protobuf_AssignDesc_transaction_2eproto();
  friend void protobuf_ShutdownFile_transaction_2eproto();
  
  void InitAsDefaultInstance();
  static TransReq_Op* default_instance_;
};
// -------------------------------------------------------------------

class TransReq : public ::google::protobuf::Message {
 public:
  TransReq();
  virtual ~TransReq();
  
  TransReq(const TransReq& from);
  
  inline TransReq& operator=(const TransReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransReq& default_instance();
  
  void Swap(TransReq* other);
  
  // implements Message ----------------------------------------------
  
  TransReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransReq& from);
  void MergeFrom(const TransReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TransReq_Op Op;
  
  // accessors -------------------------------------------------------
  
  // repeated .InMemDB.TransReq.Op op = 1;
  inline int op_size() const;
  inline void clear_op();
  static const int kOpFieldNumber = 1;
  inline const ::InMemDB::TransReq_Op& op(int index) const;
  inline ::InMemDB::TransReq_Op* mutable_op(int index);
  inline ::InMemDB::TransReq_Op* add_op();
  inline const ::google::protobuf::RepeatedPtrField< ::InMemDB::TransReq_Op >&
      op() const;
  inline ::google::protobuf::RepeatedPtrField< ::InMemDB::TransReq_Op >*
      mutable_op();
  
  // @@protoc_insertion_point(class_scope:InMemDB.TransReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::InMemDB::TransReq_Op > op_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_transaction_2eproto();
  friend void protobuf_AssignDesc_transaction_2eproto();
  friend void protobuf_ShutdownFile_transaction_2eproto();
  
  void InitAsDefaultInstance();
  static TransReq* default_instance_;
};
// -------------------------------------------------------------------

class TransRsp_Rsp : public ::google::protobuf::Message {
 public:
  TransRsp_Rsp();
  virtual ~TransRsp_Rsp();
  
  TransRsp_Rsp(const TransRsp_Rsp& from);
  
  inline TransRsp_Rsp& operator=(const TransRsp_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransRsp_Rsp& default_instance();
  
  void Swap(TransRsp_Rsp* other);
  
  // implements Message ----------------------------------------------
  
  TransRsp_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransRsp_Rsp& from);
  void MergeFrom(const TransRsp_Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:InMemDB.TransRsp.Rsp)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* value_;
  ::google::protobuf::int32 key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_transaction_2eproto();
  friend void protobuf_AssignDesc_transaction_2eproto();
  friend void protobuf_ShutdownFile_transaction_2eproto();
  
  void InitAsDefaultInstance();
  static TransRsp_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class TransRsp : public ::google::protobuf::Message {
 public:
  TransRsp();
  virtual ~TransRsp();
  
  TransRsp(const TransRsp& from);
  
  inline TransRsp& operator=(const TransRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransRsp& default_instance();
  
  void Swap(TransRsp* other);
  
  // implements Message ----------------------------------------------
  
  TransRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransRsp& from);
  void MergeFrom(const TransRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TransRsp_Rsp Rsp;
  
  // accessors -------------------------------------------------------
  
  // required bool status = 1 [default = false];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline bool status() const;
  inline void set_status(bool value);
  
  // repeated .InMemDB.TransRsp.Rsp rsp = 2;
  inline int rsp_size() const;
  inline void clear_rsp();
  static const int kRspFieldNumber = 2;
  inline const ::InMemDB::TransRsp_Rsp& rsp(int index) const;
  inline ::InMemDB::TransRsp_Rsp* mutable_rsp(int index);
  inline ::InMemDB::TransRsp_Rsp* add_rsp();
  inline const ::google::protobuf::RepeatedPtrField< ::InMemDB::TransRsp_Rsp >&
      rsp() const;
  inline ::google::protobuf::RepeatedPtrField< ::InMemDB::TransRsp_Rsp >*
      mutable_rsp();
  
  // @@protoc_insertion_point(class_scope:InMemDB.TransRsp)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::InMemDB::TransRsp_Rsp > rsp_;
  bool status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_transaction_2eproto();
  friend void protobuf_AssignDesc_transaction_2eproto();
  friend void protobuf_ShutdownFile_transaction_2eproto();
  
  void InitAsDefaultInstance();
  static TransRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TransReq_Op

// required .InMemDB.TransReq.Op.OpCode code = 1;
inline bool TransReq_Op::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransReq_Op::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransReq_Op::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransReq_Op::clear_code() {
  code_ = 1;
  clear_has_code();
}
inline ::InMemDB::TransReq_Op_OpCode TransReq_Op::code() const {
  return static_cast< ::InMemDB::TransReq_Op_OpCode >(code_);
}
inline void TransReq_Op::set_code(::InMemDB::TransReq_Op_OpCode value) {
  GOOGLE_DCHECK(::InMemDB::TransReq_Op_OpCode_IsValid(value));
  set_has_code();
  code_ = value;
}

// required int32 key = 2;
inline bool TransReq_Op::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransReq_Op::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransReq_Op::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransReq_Op::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 TransReq_Op::key() const {
  return key_;
}
inline void TransReq_Op::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional int32 key2 = 3 [default = 0];
inline bool TransReq_Op::has_key2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransReq_Op::set_has_key2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransReq_Op::clear_has_key2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransReq_Op::clear_key2() {
  key2_ = 0;
  clear_has_key2();
}
inline ::google::protobuf::int32 TransReq_Op::key2() const {
  return key2_;
}
inline void TransReq_Op::set_key2(::google::protobuf::int32 value) {
  set_has_key2();
  key2_ = value;
}

// optional string value = 4 [default = ""];
inline bool TransReq_Op::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransReq_Op::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransReq_Op::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransReq_Op::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& TransReq_Op::value() const {
  return *value_;
}
inline void TransReq_Op::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TransReq_Op::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TransReq_Op::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransReq_Op::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* TransReq_Op::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TransReq

// repeated .InMemDB.TransReq.Op op = 1;
inline int TransReq::op_size() const {
  return op_.size();
}
inline void TransReq::clear_op() {
  op_.Clear();
}
inline const ::InMemDB::TransReq_Op& TransReq::op(int index) const {
  return op_.Get(index);
}
inline ::InMemDB::TransReq_Op* TransReq::mutable_op(int index) {
  return op_.Mutable(index);
}
inline ::InMemDB::TransReq_Op* TransReq::add_op() {
  return op_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::InMemDB::TransReq_Op >&
TransReq::op() const {
  return op_;
}
inline ::google::protobuf::RepeatedPtrField< ::InMemDB::TransReq_Op >*
TransReq::mutable_op() {
  return &op_;
}

// -------------------------------------------------------------------

// TransRsp_Rsp

// required int32 key = 1;
inline bool TransRsp_Rsp::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransRsp_Rsp::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransRsp_Rsp::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransRsp_Rsp::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 TransRsp_Rsp::key() const {
  return key_;
}
inline void TransRsp_Rsp::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required string value = 2;
inline bool TransRsp_Rsp::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransRsp_Rsp::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransRsp_Rsp::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransRsp_Rsp::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& TransRsp_Rsp::value() const {
  return *value_;
}
inline void TransRsp_Rsp::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TransRsp_Rsp::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void TransRsp_Rsp::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransRsp_Rsp::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* TransRsp_Rsp::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TransRsp

// required bool status = 1 [default = false];
inline bool TransRsp::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransRsp::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransRsp::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransRsp::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool TransRsp::status() const {
  return status_;
}
inline void TransRsp::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// repeated .InMemDB.TransRsp.Rsp rsp = 2;
inline int TransRsp::rsp_size() const {
  return rsp_.size();
}
inline void TransRsp::clear_rsp() {
  rsp_.Clear();
}
inline const ::InMemDB::TransRsp_Rsp& TransRsp::rsp(int index) const {
  return rsp_.Get(index);
}
inline ::InMemDB::TransRsp_Rsp* TransRsp::mutable_rsp(int index) {
  return rsp_.Mutable(index);
}
inline ::InMemDB::TransRsp_Rsp* TransRsp::add_rsp() {
  return rsp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::InMemDB::TransRsp_Rsp >&
TransRsp::rsp() const {
  return rsp_;
}
inline ::google::protobuf::RepeatedPtrField< ::InMemDB::TransRsp_Rsp >*
TransRsp::mutable_rsp() {
  return &rsp_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace InMemDB

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InMemDB::TransReq_Op_OpCode>() {
  return ::InMemDB::TransReq_Op_OpCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transaction_2eproto__INCLUDED
